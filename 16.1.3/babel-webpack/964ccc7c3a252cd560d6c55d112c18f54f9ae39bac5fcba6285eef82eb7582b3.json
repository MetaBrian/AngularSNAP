{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class NavBarComponent {\n  //replace modeSwitch functionality once services have been injected & all content has been written\n  //make method DRY\n  modeSwitch() {\n    const navBarText = document.getElementById('LogoText');\n    const navBar = document.getElementById('navBar');\n    const logoButton = document.getElementById('LogoButton');\n    const contentDiv = document.getElementById('contentDiv');\n    const darkContent = Array.from(document.getElementsByClassName('darkContent'));\n    const darkLinks = Array.from(document.getElementsByClassName('darkLinks'));\n    const darkExternalLinks = Array.from(document.getElementsByClassName('darkExternalLinks'));\n    const lightContent = Array.from(document.getElementsByClassName('lightContent'));\n    const lightLinks = Array.from(document.getElementsByClassName('lightLinks'));\n    const lightExternalLinks = Array.from(document.getElementsByClassName('lightExternalLinks'));\n    if (navBarText.className === 'DarkLogoText') {\n      navBarText.className = 'LightLogoText';\n      navBar.className = 'LightNavBar';\n      logoButton.className = 'lightButton';\n      contentDiv.className = 'contentDivLight';\n      darkContent.forEach(element => {\n        element.className = 'lightContent';\n      });\n      darkLinks.forEach(element => element.className = 'lightLinks');\n      darkExternalLinks.forEach(element => element.className = 'lightExternalLinks');\n    } else {\n      navBarText.className = 'DarkLogoText';\n      navBar.className = 'DarkNavBar';\n      logoButton.className = 'darkButton';\n      contentDiv.className = 'contentDivDark';\n      navBarText.className = 'DarkLogoText';\n      navBar.className = 'DarkNavBar';\n      logoButton.className = 'darkButton';\n      contentDiv.className = 'contentDivDark';\n    }\n  }\n  consoleLogger() {\n    console.log('clicked');\n  }\n  newTab() {\n    window.open('https://github.com/MetaBrian/AngularSNAP', '_blank');\n  }\n}\nNavBarComponent.ɵfac = function NavBarComponent_Factory(t) {\n  return new (t || NavBarComponent)();\n};\nNavBarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavBarComponent,\n  selectors: [[\"app-nav-bar\"]],\n  decls: 15,\n  vars: 0,\n  consts: [[\"id\", \"navBar\", 1, \"DarkNavBar\"], [1, \"Logo\"], [\"id\", \"LogoImage\", \"height\", \"100%\", \"src\", \"../assets/Thanos_Snap.png\", \"alt\", \"Thanos Snapping Emote\"], [\"id\", \"LogoButton\", \"routerLink\", \"/\", 1, \"darkButton\"], [\"id\", \"LogoText\", 1, \"DarkLogoText\"], [1, \"navBarButtons\"], [\"routerLink\", \"/deckbuilder\", 1, \"darkLinks\"], [\"routerLink\", \"/cardrater\", 1, \"darkLinks\"], [1, \"darkExternalLinks\", 3, \"click\"], [\"height\", \"100%\", \"src\", \"../assets/lightdark.png\", \"alt\", \"Sun & Moon symbol\"]],\n  template: function NavBarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"img\", 2);\n      i0.ɵɵelementStart(3, \"button\", 3)(4, \"h1\", 4);\n      i0.ɵɵtext(5, \"AngularSNAP!\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"button\", 6);\n      i0.ɵɵtext(8, \"Deck Builder\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 7);\n      i0.ɵɵtext(10, \"Card Rater\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function NavBarComponent_Template_button_click_11_listener() {\n        return ctx.newTab();\n      });\n      i0.ɵɵtext(12, \"GitHub\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function NavBarComponent_Template_button_click_13_listener() {\n        return ctx.modeSwitch();\n      });\n      i0.ɵɵelement(14, \"img\", 9);\n      i0.ɵɵelementEnd()()();\n    }\n  },\n  dependencies: [i1.RouterLink],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["NavBarComponent","modeSwitch","navBarText","document","getElementById","navBar","logoButton","contentDiv","darkContent","Array","from","getElementsByClassName","darkLinks","darkExternalLinks","lightContent","lightLinks","lightExternalLinks","className","forEach","element","consoleLogger","console","log","newTab","window","open","selectors","decls","vars","consts","template","NavBarComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵlistener","NavBarComponent_Template_button_click_11_listener","NavBarComponent_Template_button_click_13_listener"],"sources":["/Users/owner/AngularSNAP/AngularSNAP/src/app/components/nav-bar/nav-bar.component.ts","/Users/owner/AngularSNAP/AngularSNAP/src/app/components/nav-bar/nav-bar.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css'],\n})\nexport class NavBarComponent {\n  //replace modeSwitch functionality once services have been injected & all content has been written\n  //make method DRY\n  modeSwitch(): void {\n    const navBarText = document.getElementById('LogoText');\n    const navBar = document.getElementById('navBar');\n    const logoButton = document.getElementById('LogoButton');\n    const contentDiv = document.getElementById('contentDiv');\n\n    const darkContent = Array.from(\n      document.getElementsByClassName('darkContent')\n    );\n    const darkLinks = Array.from(document.getElementsByClassName('darkLinks'));\n    const darkExternalLinks = Array.from(\n      document.getElementsByClassName('darkExternalLinks')\n    );\n\n    const lightContent = Array.from(\n      document.getElementsByClassName('lightContent')\n    );\n    const lightLinks = Array.from(\n      document.getElementsByClassName('lightLinks')\n    );\n    const lightExternalLinks = Array.from(\n      document.getElementsByClassName('lightExternalLinks')\n    );\n\n    if (navBarText.className === 'DarkLogoText') {\n      navBarText.className = 'LightLogoText';\n      navBar.className = 'LightNavBar';\n      logoButton.className = 'lightButton';\n      contentDiv.className = 'contentDivLight';\n\n      darkContent.forEach((element) => {\n        element.className = 'lightContent';\n      });\n\n      darkLinks.forEach((element) => (element.className = 'lightLinks'));\n      darkExternalLinks.forEach(\n        (element) => (element.className = 'lightExternalLinks')\n      );\n    } else {\n      navBarText.className = 'DarkLogoText';\n      navBar.className = 'DarkNavBar';\n      logoButton.className = 'darkButton';\n      contentDiv.className = 'contentDivDark';\n\n      navBarText.className = 'DarkLogoText';\n      navBar.className = 'DarkNavBar';\n      logoButton.className = 'darkButton';\n      contentDiv.className = 'contentDivDark';\n    }\n  }\n\n  consoleLogger(): void {\n    console.log('clicked');\n  }\n\n  newTab(): void {\n    window.open('https://github.com/MetaBrian/AngularSNAP', '_blank');\n  }\n}\n","<div id=\"navBar\" class=\"DarkNavBar\">\n  <div class=\"Logo\">\n    <img\n      id=\"LogoImage\"\n      height=\"100%\"\n      src=\"../assets/Thanos_Snap.png\"\n      alt=\"Thanos Snapping Emote\"\n    />\n    <button id=\"LogoButton\" class=\"darkButton\" routerLink=\"/\">\n      <h1 class=\"DarkLogoText\" id=\"LogoText\">AngularSNAP!</h1>\n    </button>\n  </div>\n\n  <div class=\"navBarButtons\">\n    <button class=\"darkLinks\" routerLink=\"/deckbuilder\">Deck Builder</button>\n    <button class=\"darkLinks\" routerLink=\"/cardrater\">Card Rater</button>\n    <button (click)=\"newTab()\" class=\"darkExternalLinks\">GitHub</button>\n    <button (click)=\"modeSwitch()\" class=\"darkExternalLinks\">\n      <img\n        height=\"100%\"\n        src=\"../assets/lightdark.png\"\n        alt=\"Sun & Moon symbol\"\n      />\n    </button>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}